######################################################
# Begin profiling                                    #
######################################################

# zmodload zsh/zprof

######################################################
# Auto-start TMUX                                    #
######################################################

if [ -z "$TMUX" ] && \
   [ "$TERM" = "xterm-256color" ] && \
   [ "$TERM_PROGRAM" != "vscode" ]
then
    tmux attach -t TMUX || tmux new -s TMUX
fi

######################################################
# Add binaries to path                               #
######################################################

PATH=$DOTFILES_DIR/bin:$PATH

#######################################################
# Setup prompt                                        #
#######################################################

export SPACESHIP_PROMPT_ORDER=( \
  time \
  user \
  dir \
  host \
  git \
  package \
  node \
  line_sep \
  exit_code \
  char \
  )
#######################################################
# Load #
#######################################################

function add_completion_dirs_to_fpath() {
  setopt NULL_GLOB
  readonly completions=($DOTFILES_DIR/config/*/completions/_*.zsh)
  unsetopt NULL_GLOB

  for completion_file in $completions; do
    completion_dir=$(dirname $completion_file)
    [ ! -z "$DEBUG_SOURCING" ] && echo "$(gdate +%s/%N) (completions): Adding $completion_dir to fpath"
    fpath=($completion_dir $fpath)
  done
}
add_completion_dirs_to_fpath

#######################################################
# Load plugins                                        #
#######################################################

if [ ! -f "$ZSH_DIR/load-plugins.sh" ]; then
  echo "load-plugins.sh not found. Installing with antibody"
  antibody bundle < "$ZSH_DIR/plugins.txt" > "$ZSH_DIR/load-plugins.sh"
fi

autoload -Uz compinit
compinit

source "$ZSH_DIR/load-plugins.sh"

#######################################################
# Auto-sourcing                                       #
#######################################################

source_shellfiles() {
  local private_env_file
  private_env_file="$HOME/.env.private.zsh"

  if [ -f "$private_env_file" ]; then
    [ ! -z "$DEBUG_SOURCING" ] && echo "$(gdate +%s/%N): Sourcing $private_env_file"
    source "$private_env_file"
  fi

  setopt null_glob
  setopt +o nomatch

  readonly initfiles=($DOTFILES_DIR/config/zshell/init/*.{zsh,sh})

  for init_file in $initfiles; do
    [ ! -z "$DEBUG_SOURCING" ] && echo "$(gdate +%s/%N) (init): Sourcing $init_file"
    source "$init_file"
  done

  readonly envfiles=($DOTFILES_DIR/config/*/env.{zsh,sh})

  for env_file in $envfiles; do
    [ ! -z "$DEBUG_SOURCING" ] && echo "$(gdate +%s/%N) (env): Sourcing $env_file"
    source "$env_file"
  done

  readonly shellfiles=($DOTFILES_DIR/config/*/*.{zsh,sh})

  for shell_file in ${${shellfiles:#*/env.zsh}}; do
    [  ! -z "$DEBUG_SOURCING" ] && echo "$(gdate +%s/%N) (shell): Sourcing $shell_file"
    source "$shell_file"
  done

  setopt -o nomatch
  unsetopt null_glob
}
source_shellfiles

#####################################################
# Configure shell integrations                      #
# ###################################################

# Adds fzf shell bindings, such as Ctrl-R replacement
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Setup fnm aliases
eval "$(fnm env --multi)"

#####################################################
# Zshell configuration                              #
#####################################################

HISTFILE=~/.zsh_history

zstyle ':completion:*' menu select

# Allow changing directories without `cd`
setopt autocd

export SAVEHIST=10000
export HISTSIZE=10000

# Dont overwrite history
setopt append_history

# Also record time and duration of commands.
setopt extended_history

# Immediately append to the history file, not just when a term is killed
setopt inc_append_history

# Share history between multiple shells
setopt share_history

# Clear duplicates when trimming internal hist.
setopt hist_expire_dups_first

# Dont display duplicates during searches.
setopt hist_find_no_dups

# Ignore consecutive duplicates.
setopt hist_ignore_dups

# Remember only one unique copy of the command.
setopt hist_ignore_all_dups

# Remove superfluous blanks.
setopt hist_reduce_blanks

# Omit older commands in favor of newer ones.
setopt hist_save_no_dups

# Ignore commands that start with space.
setopt hist_ignore_space

# Load colours into shell variables https://github.com/ninrod/dotfiles/issues/134
autoload -U colors
colors

# Evaluate colors in prompt skin
setopt PROMPT_SUBST

export PATH="/usr/local/sbin:$PATH"

######################################################
# End profiling                                      #
######################################################

# zprof

# tabtab source for serverless package
# uninstall by removing these lines or running `tabtab uninstall serverless`
[[ -f /Users/wainwb01/.config/yarn/global/node_modules/tabtab/.completions/serverless.zsh ]] && . /Users/wainwb01/.config/yarn/global/node_modules/tabtab/.completions/serverless.zsh
# tabtab source for sls package
# uninstall by removing these lines or running `tabtab uninstall sls`
[[ -f /Users/wainwb01/.config/yarn/global/node_modules/tabtab/.completions/sls.zsh ]] && . /Users/wainwb01/.config/yarn/global/node_modules/tabtab/.completions/sls.zsh
# tabtab source for slss package
# uninstall by removing these lines or running `tabtab uninstall slss`
[[ -f /Users/wainwb01/.config/yarn/global/node_modules/tabtab/.completions/slss.zsh ]] && . /Users/wainwb01/.config/yarn/global/node_modules/tabtab/.completions/slss.zsh
# fnm
eval "$(fnm env --multi)"
