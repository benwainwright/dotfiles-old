" Plugins
"
" =======
" {{{
runtime macros/matchit.vim

call plug#begin('~/.vim/plugged')

" Personal plugins
Plug 'sbdchd/neoformat'
Plug 'benwainwright/fzf-git'
Plug '/Users/wainwb01/repos/git-extras'

"" " Tim Pope
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'

" June Gunn
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Misc
Plug 'kshenoy/vim-signature'

" Language plugins
Plug 'pangloss/vim-javascript'
Plug 'ynkdir/vim-vimlparser'
Plug 'jparise/vim-graphql'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/plenary.nvim'

" LSP
Plug 'hrsh7th/nvim-compe'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'tzachar/compe-tabnine', { 'do': './install.sh' }
" Plug 'nvim-lua/completion-nvim'
" Plug 'aca/completion-tabnine', { 'do': './install.sh' }
Plug 'RishabhRD/popfix'
Plug 'RishabhRD/nvim-lsputils'
Plug 'kosayoda/nvim-lightbulb'
Plug 'kabouzeid/nvim-lspinstall'
Plug 'onsails/lspkind-nvim'

Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" Color theme
Plug 'kyazdani42/nvim-tree.lua'
Plug 'liuchengxu/vim-clap', { 'do': { -> clap#installer#force_download() } }
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'vim-test/vim-test'
" Plug 'rcarriga/vim-ultest', { 'do': ':UpdateRemotePlugins' }
Plug 'tweekmonster/startuptime.vim'
Plug 'honza/vim-snippets'
Plug 'mlaursen/vim-react-snippets'
Plug 'wellle/targets.vim'
Plug 'gioele/vim-autoswap'
Plug 'ryanoasis/vim-devicons'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'chrisbra/unicode.vim'
Plug 'sindrets/diffview.nvim'
Plug 'jiangmiao/auto-pairs'
Plug 'bkad/CamelCaseMotion'
Plug 'PeterRincker/vim-argumentative'
Plug 'michaeljsmith/vim-indent-object'
" Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'lepture/vim-velocity'
Plug 'mattn/emmet-vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'NLKNguyen/papercolor-theme'
Plug 'luochen1990/rainbow'
Plug 'preservim/vimux'
Plug 'mfussenegger/nvim-dap'
let g:rainbow_active = 1

" vimrc
let g:completion_chain_complete_list = {
    \ 'default': [
    \    {'complete_items': ['lsp', 'snippet', 'tabnine']},
    \    {'mode': '<c-p>'},
    \    {'mode': '<c-n>'}
    \]
\}

call plug#end()
" }}}

let g:nvim_tree_highlight_opened_files = 1
let g:nvim_tree_git_hl = 1
let g:nvim_tree_lsp_diagnostics = 1
let g:nvim_tree_update_cwd = 1
let g:nvim_tree_follow = 1
let g:completion_trigger_character = [".", "\"", ",", "/", "@", "<", "(", "[", "{", "=", ">"]
let g:completion_timer_cycle = 50

" Core VIM settings
" =================
" {{{
" When opening a file from the command line, this stops
" the empty buffer appearing as a separate buffer in my
" tabline
if bufname('%') == ''
  set bufhidden=wipe
endif

" See https://github.com/kovidgoyal/kitty/issues/108#issuecomment-320492663
let &t_ut=''


set directory^=$HOME/.vim/tmp/

set backupdir=$HOME/.vim/backup/

" Store undo data between vim sessions
if has("persistent_undo")
  set undofile
  set undodir=~/.vim/undo
endif

if exists('+termguicolors')
  set t_Co=256
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

let g:material_theme_style = 'ocean'
let g:material_terminal_italics = 1

" Don't spellcheck URLS
syntax match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
" Don't spell check initialisms
syntax match AcronymNoSpell '\<\(\u\|\d\)\{3,}s\?\>' contains=@NoSpell

let g:path_to_python_interpreter = '/usr/bin/python'

let mapleader = "\<Space>"
let maplocalleader = "\\"


" }}}

" COC
" ===
"{{{
"let g:coc_config_home = $HOME . '/.vim' 

"function! s:check_back_space() abort
"    let col = col('.') - 1
"      return !col || getline('.')[col - 1]  =~ '\s'
"    endfunction

"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()

""Close preview window when completion is done.
"autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

"let g:coc_global_extensions = [
"      \ 'coc-marketplace',
"      \ 'coc-scssmodules',
"      \ 'coc-lua', 
"      \ 'coc-sh',
"      \ 'coc-react-refactor',
"      \ 'coc-vimlsp',
"      \ 'coc-phpls',
"      \ 'coc-eslint',
"      \ 'coc-emoji',
"      \ 'coc-tsserver',
"      \ 'coc-snippets',
"      \ 'coc-actions',
"      \ 'coc-json',
"      \ 'coc-webpack',
"      \ 'coc-stylelint',
"      \ 'coc-css',
"      \ 'coc-tabnine',
"      \ 'coc-prettier', 
"      \ 'coc-docker',
"      \ 'coc-highlight',
"      \ 'coc-emmet',
"      \ 'coc-html',
"      \ 'coc-markdownlint',
"      \ ]


"nnoremap <C-e> :NvimTreeToggle<CR>

"nnoremap <leader>e  :<C-u>CocList diagnostics<CR>

"nnoremap <leader>s :CocList symbols<CR>

"nnoremap <space>a :CocAction<CR>
"vnoremap <leader>a :CocAction<CR>
"nmap <leader>r <Plug>(coc-rename)
"" Run jest for current project
"command! -nargs=0 Jest :call  CocAction('runCommand', 'jest.projectTest')

"" Run jest for current file
"command! -nargs=0 JestCurrent :call  CocAction('runCommand', 'jest.fileTest', ['%'])

"" Run jest for current test
"nnoremap <leader>te :call CocAction('runCommand', 'jest.singleTest')<CR>

"" Init jest in current cwd, require global jest command exists
"command! JestInit :call CocAction('runCommand', 'jest.init')

" " this mapping is causing weird startup errors
" "nnoremap <silent> <C-[> :lprev<cr>

"nnoremap <leader>jvd :call CocActionAsync('jumpDefinition', 'vsplit')<CR>
"nnoremap <leader>jvi :call CocActionAsync('jumpImplementation', 'vsplit')<CR>
"nnoremap <leader>jd :call CocActionAsync('jumpDefinition', 'edit')<CR>
"nnoremap <leader>ji :call CocActionAsync('jumpImplementation', 'edit')<CR>
"nnoremap <leader>jr :call CocActionAsync('jumpReferences')<CR>

"nnoremap K :call <SID>show_documentation()<CR>

"function! s:show_documentation()
"  if (index(['vim','help'], &filetype) >= 0)
"    execute 'h '.expand('<cword>')
"  elseif (coc#rpc#ready())
"    call CocActionAsync('doHover')
"  else
"    execute '!' . &keywordprg . " " . expand('<cword>')
"  endif
"endfunction

""" }}}

" Misc Plugin Config
" ==================
" {{{

" Stops autopairs doing the weird behaviour where you jump to the next pair
" remap :Ag
"
" instead of inserting one
let g:AutoPairsMultilineClose = 0
let test#javascript#jest#options = "--color=always"
let g:kitty_navigator_listening_on_address = 'unix:/tmp/mykitty'
let g:test#strategy = 'vimux'


let test#javascript#jest#file_pattern = '\v.+.(spec|spec.node).(js|jsx|ts|tsx)$'

" See https://github.com/ryanoasis/vim-devicons/issues/154#issuecomment-281095173
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

let g:signify_vcs_list = [ 'git' ]
let g:argumentobject_force_toplevel = 1

let g:netrw_altv=1
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzfSwitchProjectProjects = [ "~/dotfiles" ]
let g:fzfSwitchProjectWorkspaces = [
      \ "~/workspace",
      \ "~/repos",
      \ "~/cinch-repos"
      \ ]

let g:fzf_layout = { 'down': '~40%' }
"" }}}

" Functions
" =========
" {{{
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

function! NetrwSidebarToggle()
  let g:netrw_chgwin = winnr()
  Vexplore
endfunction



function! s:fullscreen_tab_toggle()
  if winnr('$') > 0
    tabedit %
  else
    tabclose
  endif
endfunction


command! MaximiseToggle call s:fullscreen_tab_toggle()

" }}}

cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') . '/' : '%%'

" Normal Mode Mappings
" ====================
"s {{{

nnoremap <C-e> :NvimTreeToggle<CR>
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
nnoremap <leader>a :CocAction<CR>
nnoremap <CR> :noh<CR><CR>
nnoremap <leader>G :Ag<CR>
nnoremap <C-b> :Buffers<CR>
nnoremap <C-f> :FzfChooseProjectFile<CR>
nnoremap <leader>cd :FzfSwitchProject<CR>
nnoremap <C-t> :Trouble<CR>
nnoremap <leader>F :GitFiles!<CR>
nnoremap <leader>nn :call NumberToggle()<CR>
nnoremap <leader>tn :TestNearest<CR>
nnoremap <leader>T :TestFile<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>pp :Gpush<CR>
nnoremap <leader>gs :Neogit kind=split<CR>
nnoremap <leader>gb :CheckoutBranch<CR>
nnoremap <leader>gp :CheckoutPR<CR>
nnoremap <leader>pbb :PrBlame<CR>
nnoremap <leader>pbc :PrBlame!<CR>
nnoremap <c-c>cc :Commentary<CR>
nnoremap <Leader>pr :call OpenLinePr()<cr>
nnoremap <leader>v :vsplit ~/dotfiles/config/vim/vimrc.dotfile<cr>
nnoremap <leader><tab> <plug>(fzf-maps-n)
xnoremap <leader><tab> <plug>(fzf-maps-x)
onoremap <leader><tab> <plug>(fzf-maps-o)
nnoremap t<C-n> :TestNearest<CR> " t Ctrl+n
nnoremap t<C-f> :TestFile<CR>    " t Ctrl+f
nnoremap t<C-s> :TestSuite<CR>   " t Ctrl+s
nnoremap t<C-l> :TestLast<CR>    " t Ctrl+l
nnoremap t<C-g> :TestVisit<CR>   " t Ctrl+g
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap [B :bfirst<CR>
nnoremap ]B :blast<CR>
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
" }}}

" Visual mode mappings
" {{{
vnoremap <silent> <c-c>cc :Commentary<CR>
" }}}

" insert mode mappings
" =====================
" {{{
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
" }}}

xnoremap il g_o^
onoremap il :normal vil<CR>
xnoremap al $o^
onoremap al :normal val<CR>

" Autocommands
" ============
" {{{
augroup vimrc
  autocmd!
    autocmd! FileType json set filetype=jsonc
    " au BufWritePost * UltestNearest
    autocmd BufNewFile,BufRead *.vtl set ft=velocity
    " autocmd CursorHold * silent call CocActionAsync('highlight')
    " autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    " autocmd CursorHold * silent call CocActionAsync('highlight')
    " autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    autocmd BufNewFile,BufRead Jenkinsfile* setlocal filetype=groovy
    autocmd FileType gitcommit,markdown,plantuml,conf setlocal spell
    autocmd FileType markdown,conf setlocal linebreak
    autocmd FileType NvimTree setlocal relativenumber
    autocmd CmdlineEnter * :set norelativenumber
    autocmd CmdlineLeave * :set relativenumber
    autocmd BufWritePre * undojoin | Neoformat
    autocmd FileType coc-explorer setlocal nonumber
    autocmd FileType coc-explorer setlocal norelativenumber
    autocmd FileType markdown,conf setlocal textwidth=80
    autocmd FileType gitcommit setlocal textwidth=0 wrapmargin=0
    autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
    autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
    autocmd bufwritepost ~/.vimrc source ~/.vimrc
    autocmd BufWinEnter,Syntax * syn sync minlines=500 maxlines=500
    autocmd FileType plantuml let g:plantuml_previewer#plantuml_jar_path = get(
          \  matchlist(system('cat `which plantuml` | grep plantuml.jar'), '\v.*\s[''"]?(\S+plantuml\.jar).*'),
          \  1,
          \  0
          \)
augroup END
" }}}

" Colors and Highlights
" ====================
" {{{

" Sneaky hack that removes the tildes from the fringe
highlight NonText guifg=bg

highlight CursorLine ctermbg=236
highlight DiffDelete guifg=red guibg=NONE
highlight DiffAdd guifg=green guibg=NONE
highlight DiffChange guifg=yellow guibg=NONE
highlight CocErrorSign guifg=red guibg=NONE
highlight CocWarningSign guifg=yellow guibg=NONE
highlight CocInfoSign guifg=#3399FF guibg=NONE
highlight CocHintSign guifg=green guibg=NONE

highlight terminal
      \ guibg=black

highlight Cursor guifg=black

let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

"" }}}

let g:neovide_cursor_vfx_mode = "wireframe"

set guifont=FiraCode\ Nerd\ Font:h18

if has('gui')
  set macligatures
endif

set guioptions+=a  " take ownership if windowing systems global selection in Visual mode
set guioptions+=c  " use console dialogs instead of popups for simple choices

set guioptions-=m  " remove menu bar
set guioptions-=T  " remove toolbar
set guioptions-=l  " remove lefthand toolbar
set guioptions-=L
set guioptions-=r  " remove righthand toolbar

set showtabline=0

set noswapfile

tnoremap <silent> <c-h> <c-w>:TmuxNavigateLeft<cr>
tnoremap <silent> <c-j> <c-w>:TmuxNavigateDown<cr>
tnoremap <silent> <c-k> <c-w>:TmuxNavigateUp<cr>
tnoremap <silent> <c-l> <c-w>:TmuxNavigateRight<cr>
tnoremap <silent> <C-a>z <c-w>:MaximiseToggle<CR>

highlight DiffAdd ctermbg=NONE guibg=NONE ctermfg=green guifg=green 
