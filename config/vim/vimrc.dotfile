" See https://github.com/kovidgoyal/kitty/issues/108#issuecomment-320492663
let &t_ut=''

filetype plugin indent on
syntax on

set title
let &titlestring='%t - nvim'

set directory^=$HOME/.vim/tmp/

set backupdir=$HOME/.vim/backup/

" Store undo data between vim sessions
if has("persistent_undo")
 set undofile
 set undodir=~/.vim/undo
endif

if exists('+termguicolors')
 set t_Co=256
 let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
 let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
 set termguicolors
endif

let g:material_theme_style = 'ocean'
let g:material_terminal_italics = 1

" Don't spellcheck URLS
syntax match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
" Don't spell check initialisms
syntax match AcronymNoSpell '\<\(\u\|\d\)\{3,}s\?\>' contains=@NoSpell

let g:path_to_python_interpreter = '/usr/bin/python'

let mapleader = "\<Space>"
let maplocalleader = "\\"


" Stops autopairs doing the weird behaviour where you jump to the next pair
" remap :Ag
"
" instead of inserting one
let g:AutoPairsMultilineClose = 0
let test#javascript#jest#options = "--color=always"
let g:kitty_navigator_listening_on_address = 'unix:/tmp/mykitty'

let test#javascript#jest#file_pattern = '\v.+.(spec|spec.node).(js|jsx|ts|tsx)$'

" See https://github.com/ryanoasis/vim-devicons/issues/154#issuecomment-281095173
if exists('g:loaded_webdevicons')
 call webdevicons#refresh()
endif

let g:signify_vcs_list = [ 'git' ]
let g:argumentobject_force_toplevel = 1

let g:netrw_altv=1
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzfSwitchProjectProjects = [ "~/dotfiles" ]
let g:fzfSwitchProjectWorkspaces = [
     \ "~/workspace",
     \ "~/repos",
     \ "~/cinch-repos"
     \ ]

let g:fzf_layout = { 'down': '~40%' }
"" }}}

cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') . '/' : '%%'

nnoremap <C-e> :NvimTreeToggle<CR>
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
nnoremap <leader>a :CocAction<CR>
nnoremap <CR> :noh<CR><CR>
nnoremap <leader>G :Ag<CR>
nnoremap <C-b> :Buffers<CR>
nnoremap <C-f> :FzfChooseProjectFile<CR>
nnoremap <leader>cd :FzfSwitchProject<CR>
nnoremap <C-t> :Trouble<CR>
nnoremap <leader>F :GitFiles!<CR>
nnoremap <leader>tn :TestNearest<CR>
nnoremap <leader>T :TestFile<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>pp :Gpush<CR>
nnoremap <leader>gs :Neogit kind=split<CR>
nnoremap <leader>gb :CheckoutBranch<CR>
nnoremap <leader>gp :CheckoutPR<CR>
nnoremap <leader>pbb :PrBlame<CR>
nnoremap <leader>pbc :PrBlame!<CR>
nnoremap <c-c>cc :Commentary<CR>
nnoremap <Leader>pr :call OpenLinePr()<cr>
nnoremap <leader>v :vsplit ~/dotfiles/config/vim/vimrc.dotfile<cr>
nnoremap <leader><tab> <plug>(fzf-maps-n)
xnoremap <leader><tab> <plug>(fzf-maps-x)
onoremap <leader><tab> <plug>(fzf-maps-o)
nnoremap t<C-n> :TestNearest<CR> " t Ctrl+n
nnoremap t<C-f> :TestFile<CR>    " t Ctrl+f
nnoremap t<C-s> :TestSuite<CR>   " t Ctrl+s
nnoremap t<C-l> :TestLast<CR>    " t Ctrl+l
nnoremap t<C-g> :TestVisit<CR>   " t Ctrl+g
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap [B :bfirst<CR>
nnoremap ]B :blast<CR>
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
" }}}

vnoremap <silent> <c-c>cc :Commentary<CR>

" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

xnoremap il g_o^
onoremap il :normal vil<CR>
xnoremap al $o^
onoremap al :normal val<CR>

augroup vimrc
 autocmd!

 autocmd FileType fzf setlocal nonumber norelativenumber 
 autocmd BufWritePost plugins.lua source <afile> | PackerCompile
 autocmd! FileType json set filetype=jsonc
 autocmd BufNewFile,BufRead *.vtl set ft=velocity
 autocmd BufWritePre *.ts,*.tsx,*.js,*.jsx Neoformat
 autocmd FileType gitcommit,markdown,plantuml,conf setlocal spell
 autocmd FileType markdown,conf setlocal linebreak
 autocmd FileType NvimTree setlocal number
 autocmd FileType markdown,conf setlocal textwidth=80
 autocmd FileType kitty setlocal relativenumber
 autocmd FileType vim setlocal relativenumber
 autocmd FileType gitcommit setlocal textwidth=0 wrapmargin=0
 autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
 autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
 autocmd bufwritepost ~/.vimrc source ~/.vimrc
 autocmd BufWinEnter,Syntax * syn sync minlines=500 maxlines=500
 autocmd FileType plantuml let g:plantuml_previewer#plantuml_jar_path = get(
      "\  matchlist(system('cat `which plantuml` | grep plantuml.jar'), '\v.*\s[''"]?(\S+plantuml\.jar).*'),
       "\  1,
       "\  0
       "\)
augroup END
" Sneaky hack that removes the tildes from the fringe
highlight NonText guifg=bg

highlight CursorLine ctermbg=236
highlight DiffDelete guifg=red guibg=NONE
highlight DiffAdd guifg=green guibg=NONE
highlight DiffChange guifg=yellow guibg=NONE
highlight CocErrorSign guifg=red guibg=NONE
highlight CocWarningSign guifg=yellow guibg=NONE
highlight CocInfoSign guifg=#3399FF guibg=NONE
highlight CocHintSign guifg=green guibg=NONE

highlight terminal
     \ guibg=black

highlight Cursor guifg=black

let g:fzf_colors =
     \ { 'fg':      ['fg', 'Normal'],
     \ 'bg':      ['bg', 'Normal'],
     \ 'hl':      ['fg', 'Comment'],
     \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
     \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
     \ 'hl+':     ['fg', 'Statement'],
     \ 'info':    ['fg', 'PreProc'],
     \ 'border':  ['fg', 'Ignore'],
     \ 'prompt':  ['fg', 'Conditional'],
     \ 'pointer': ['fg', 'Exception'],
     \ 'marker':  ['fg', 'Keyword'],
     \ 'spinner': ['fg', 'Label'],
     \ 'header':  ['fg', 'Comment'] }


highlight DiffAdd ctermbg=NONE guibg=NONE ctermfg=green guifg=green 
