if &compatible
  set nocompatible               " Be iMproved
endif

set runtimepath+=/Users/wainwb01/.vim/dein/repos/github.com/Shougo/dein.vim
if dein#load_state('/Users/wainwb01/.vim/dein')
  call dein#begin('/Users/wainwb01/.vim/dein')

  " Let dein manage dein
  call dein#add('/Users/wainwb01/.vim/dein/repos/github.com/Shougo/dein.vim')

  call dein#add('vim-ruby/vim-ruby', {
        \ 'lazy': 1,
			  \ 'on_ft': ['ruby']
        \ })

  call dein#add('leafgarland/typescript-vim', {
    \ 'lazy': 1,
    \ 'on_ft': ['typescript'],
    \ })

  call dein#add('mustache/vim-mustache-handlebars', {
    \ 'lazy': 1,
    \ 'on_ft' : ['hmtl.handlebars']
    \ })

  call dein#add('tpope/vim-cucumber', {
    \ 'lazy': 1,
    \ 'on_ft' : ['ruby', 'cucumber'],
    \ })

  call dein#add('kchmck/vim-coffee-script', {
    \ 'lazy': 1,
    \ 'on_ft' : ['coffee'],
    \ })

  call dein#add('tpope/vim-markdown', {
    \ 'lazy': 1,
    \ 'on_ft' : ['markdown'],
    \ })

  call dein#add('ekalinin/Dockerfile.vim', {
    \ 'lazy': 1,
    \ 'on_ft' : ['Dockerfile'],
    \ })

  call dein#add('mxw/vim-jsx', {
    \ 'lazy': 1,
    \ 'on_ft' : ['javascript.jsx'],
    \ })

  call dein#add('elzr/vim-json', {
    \ 'lazy': 1,
    \ 'on_ft' : ['json'],
    \ })

  call dein#add('ryanoasis/vim-devicons')
  call dein#add('junegunn/fzf.vim')
  call dein#add('/usr/local/opt/fzf')
  call dein#add('tpope/vim-commentary')
  call dein#add('christoomey/vim-tmux-navigator')
  call dein#add('prabirshrestha/vim-lsp')
  call dein#add('prabirshrestha/async.vim')
  call dein#add('prabirshrestha/asyncomplete.vim')
  call dein#add('prabirshrestha/asyncomplete-buffer.vim')
  call dein#add('prabirshrestha/asyncomplete-lsp.vim')
  call dein#add('rafi/awesome-vim-colorschemes')
  call dein#add('mhinz/vim-signify')
  call dein#end()
  call dein#save_state()
endif

colorscheme anderson

let g:signify_vcs_list = [ 'git' ]

if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'whitelist': ['typescript', 'javascript', 'javascript.jsx'],
        \ })
endif

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('docker-langserver')
  " yarn global add dockerfile-language-server-nodejs
  au User lsp_setup call lsp#register_server({
        \ 'name': 'docker-langserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
        \ 'whitelist': ['Dockerfile'],
        \ })
endif

call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ }))

" Required:
syntax enable

if dein#check_install()
  call dein#install()
endif

" Core VIM settings
"==============

set clipboard=unnamed           " Allows the vim unknown buffer to work with the system clipboard
set encoding=UTF-8              " Set character encoding used inside VIM
set hidden                      " Change buffer without saving

set exrc

set lazyredraw

set tabstop=2                   " Number of spaces that a tab counts for
set expandtab                   " Use appropriate number of spaces to insert a tab
set shiftwidth=2                " Number of spaces used for indentenation
set shiftround                  " << >> snap to multiples of shiftwidth

set hlsearch                    " highlight search hits
set incsearch                   " Update search matches as characters are added to search
set ignorecase                  " Ignore case in search patterns
set smartcase                   " If search pattern contains uppercase chars, ignorecase is turned off

set nocompatible                " set 'nocompatible' to ward off unexpected things that your
                                " distro might have made, as well as sanely reset options when
                                " re-sourcing .vimrc

set wildmode=longest,list,full  " Completion mode - see :help wildmode for more
                                " info on specific settings
set wildmenu                    " Enhanced command line completion mode
set showcmd                     " Show last command at the bottom of the screen
set laststatus=2                " Always show statusline
set ruler                       " Show line and column number
set number                      " Turn on line numbering
set cursorline                  " Highlight current line
set splitright                  " vertical split opens on the right

set directory^=$HOME/.vim/tmp/  " Where to store temporary files
set autoread                    " If file changes on disk and buffer hasn't
                                " changed, autoread from disk
if has("persistent_undo")
  set undofile                  " Store undo data between sessions
  set undodir=~/.vim/undo       " Location of undo data
endif

set iskeyword+=_,$,@,%,-        " These chars really shouldn't be word
                                " dividers
                                "
set completeopt+=menuone,noinsert,preview,noselect

set shortmess+=c   " Shut off completion messages
set belloff+=ctrlg " If Vim beeps during completion

function! Open_files_in_dir(dir)
  execute 'cd ' . a:dir
  GitFiles
endfunction

" Map leader key to be the space bar
let mapleader = "\<Space>"
let maplocalleader = "\\"

nnoremap <leader>cd :call fzf#run({
            \ 'sink': function('Open_files_in_dir'),
            \ 'source': 'ls',
            \ 'dir': '~/workspace/',
            \ 'down': '40%'})<CR>

nnoremap <C-g> :Ag<CR>
nnoremap <leader>K :Ag!<CR>
nnoremap ; :Buffers<CR>
nnoremap <leader>r :Tags<CR>
nnoremap <C-f> :GitFiles<CR>
nnoremap <C-F> :Files<CR>
nnoremap <leader>F :GitFiles!<CR>
nnoremap <leader>g :GitFiles?<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>c :Commits<CR>
nnoremap <leader>C :BCommits<CR>
nnoremap <leader>s :Gstatus<CR>
nnoremap <leader>cm :Gcommit<CR>

