" Plugins
" 
" =======
" {{{
call plug#begin('~/.vim/plugged')

if has('macunix')
  "  Plug 'rizzatti/dash.vim'
endif

" Personal plugins
Plug 'benwainwright/fzf-git'
Plug 'benwainwright/fzf-project'
Plug 'benwainwright/pr-blame'
Plug 'benwainwright/terminal'

" Tim Pope
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'

" June Gunn
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Misc
" Plug 'liuchengxu/vim-which-key'
Plug 'preservim/nerdtree'
Plug 'janko/vim-test'
Plug 'syngan/vim-vimlint'
Plug 'ynkdir/vim-vimlparser'
Plug 'Shougo/neco-vim'
Plug 'plytophogy/vim-virtualenv', { 'for': 'python' }
Plug 'anowlcalledjosh/vim-lilypond'
Plug 'sonph/onehalf', {'rtp': 'vim/'}
Plug 'weirongxu/plantuml-previewer.vim'
Plug 'tyru/open-browser.vim'
Plug 'gioele/vim-autoswap'
Plug 'sheerun/vim-polyglot'
Plug 'ryanoasis/vim-devicons'
Plug 'christoomey/vim-tmux-navigator'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'chrisbra/unicode.vim'
Plug 'ludovicchabant/vim-gutentags'
Plug 'vim-airline/vim-airline'
Plug 'jiangmiao/auto-pairs'
Plug 'bkad/CamelCaseMotion'
Plug 'vim-scripts/argtextobj.vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'neoclide/coc-denite'

call plug#end()
" }}}

" Core VIM settings
" =================
" {{{

" Enable syntax highlighting
syntax enable                  

" attempt to determine the type of a file based on its name and possibly its 
" contents. Use this to allow intelligent auto-indenting for each filetype
" and for plugins that are filetype specific.
filetype indent plugin on       

" Actual confirm box rather than dialog box on errors (such as if
" you quit without writing to a file)
set confirm                     

" Allows the vim unknown buffer to work with the system clipboard, so if you
" yank a piece of text, it will be available to paste outside of VIM
set clipboard=unnamed           

" How characters are represented by VIM internally
set encoding=UTF-8

" Default character encoding for a new buffer
setglobal fileencoding=utf-8

" The buffer local setting 'fileencoding' setting specifies
" the encoding of a given buffer. This list will be used
" in order to decide what to set it to
set fileencodings=ucs-bom,utf-8,latin1

" Without this setting, when I switch to a new buffer, the current
" one is unloaded. This means that if I've made a change I'll then
" be asked if I want to save it. With this turned on, the buffer 
" simply becomes 'hidden'
set hidden

" Don't redraw the screen while executing macros, registers and other
" untyped commands
set lazyredraw

" All horizontal splits go to the bottom half
set splitbelow

" Number of spaces that tab counts for
set tabstop=2

" In insert mode, use the appropriate number of spaces to insert a tab
set expandtab

" Number of spaces used for indentation
set shiftwidth=2

" Indenting (so << and >>) is rounded to multiples of 'shiftwidth'
set shiftround

" Use marker comments for code folding
set foldmethod=marker

" Highlight search hits
set hlsearch

" Update search matches as characters are added to search
set incsearch

" Ignore case in search patterns
set ignorecase

" Override the 'ignorecase' setting if the search pattern 
" contains uppercase characters
set smartcase

" set 'nocompatible' to ward off unexpected things that your
" distro might have made, as well as sanely reset options when
" re-sourcing .vimrc
set nocompatible

" Completion mode:
" - longest: Complete till ongest common string
" - list: When more than one match, list all matches
" - full: Complete the next full match
set wildmode=longest,list,full

" Enhanced command line completion mode
set wildmenu

" Show last command in the last line of the screen
set showcmd

" Always show sign column
set signcolumn=yes

" Always show the statusline regardless of how many windows there are
set laststatus=2

" Show line and column numbers
set ruler

" Turn on line numbers
set number

" Vertical splits always open on the right
set splitright

" Where to store all temporary data (e.g. swap files)
set directory^=$HOME/.vim/tmp/

set backupdir=$HOME/.vim/backup/

" When debugging, put the verbose logfile here
set verbosefile=~/vim-verbose.log

" If the file change son disk and the buffer hasn't changed
" autoread from disk
set autoread

" Write to disk automatically
set autowrite

" Store undo data between vim sessions
if has("persistent_undo")
  set undofile
  set undodir=~/.vim/undo
endif

" Add these characters to VIM's definition of what a 'word'
" is for the purposes of motions
set iskeyword+=_,$,@,%,-

" Completion options
" - menu: Use a popup menu to show the possible completions
" - menuone: Use the popup menu also when there is only one match
" - preview: Show extra information about the selected completion
" - noselect: Do not select a match in the menu. Force the user to choose
set completeopt+=menuone,noinsert,preview,noselect

" Don't show 'ins-completion-menu' messages, e.g. "match 1 of 2"
" "the only match" are not shown
set shortmess+=c   " Shut off completion messages

" Turns off the bell in specific situations. In this case
" when there is an unknown char after <C-G> in Insert mode
set belloff+=ctrlg " If Vim beeps during completion

set updatetime=300

" When opening a file from the command line, this stops
" the empty buffer appearing as a separate buffer in my
" tabline
if bufname('%') == ''
  set bufhidden=wipe
endif

" Don't spellcheck URLS
syntax match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
" Don't spell check initialisms
syntax match AcronymNoSpell '\<\(\u\|\d\)\{3,}s\?\>' contains=@NoSpell

let g:path_to_python_interpreter = '/usr/bin/python'
" }}}

" COC
" ===
" {{{

function! s:check_back_space() abort
    let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()

"Close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" }}}

" Misc Plugin Config
" ==================
" {{{

" See https://github.com/ryanoasis/vim-devicons/issues/154#issuecomment-281095173
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

let g:gutentags_file_list_command = 'rg --files'
let g:signify_vcs_list = [ 'git' ]
let g:argumentobject_force_toplevel = 1

let g:netrw_altv=1
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzfSwitchProjectProjects = [ "~/dotfiles" ]
let g:fzfSwitchProjectWorkspaces = [ 
      \ "~/workspace",
      \ "~/repos",
      \ "~/go/src/github.com/benwainwright",
      \ "~/go/src/github.com/bbc" 
      \ ]

let g:asyncomplete_auto_completeopt = 0
"" }}}

" Functions
" =========
" {{{
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

function! NetrwSidebarToggle()
  let g:netrw_chgwin = winnr()
  Vexplore
endfunction

let s:pr_buffer = -1
let s:pr_root = ""

function! s:openPRBuffer(title, body, ...)
  if s:pr_buffer == -1
    let s:pr_root = getcwd()
    new
    setlocal buftype=nofile
    setlocal bufhidden=hide
    setlocal filetype=markdown
    setlocal noswapfile
    let s:pr_buffer = bufnr('%')
    file PR
    call appendbufline(s:pr_buffer, 0, a:title)
    let l:foundTemplate = 0
    for l:path in a:000
      let l:template = getcwd() . "/" . path
      if filereadable(l:template)
        execute '2read ' . l:template
        let l:foundTemplate = 1
        break
      endif
    endfor
    if l:foundTemplate == 0
      call appendbufline(s:pr_buffer, 2, a:body)
    endif
    $ " move to end of buffer
  else
    execute 'buffer ' . s:pr_buffer
  endif
endfunction

function! s:openNewPrBuffer()
  let l:result = system('git log -1 --pretty=%B')
  if v:shell_error == 0
    let l:title = trim(l:result)
  else
    let l:title = "PR Title"
  endif
  call s:openPRBuffer(
          \ l:title,
          \ "PR Description",
          \ "pull_request_template.md",
          \ "PULL_REQUEST_TEMPLATE.md",
          \ "docs/PULL_REQUEST_TEMPLATE.md",
          \ "docs/pull_request_template.md",
          \ ".github/pull_request_template.md",
          \ ".github/PULL_REQUEST_TEMPLATE.md")
endfunction

function! s:createPRFromPRBuffer()
  if s:pr_buffer > -1
    execute 'buffer ' . s:pr_buffer
    execute 'lcd ' . s:pr_root

    let l:buffer = join(getline(1, '$'), "\n")
    let l:result = system('hub pull-request --push --message "' . l:buffer .'"')

    if v:shell_error == 0
      let l:pos = matchstrpos(l:result, "https://github.com/")[1]
      let l:link = trim(strpart(l:result, l:pos))
      echo(l:link . " created!")
    else
      echoerr(l:result)
    endif
    execute 'bwipeout ' . s:pr_buffer
    let s:pr_buffer = -1
  else
    echoerr("No PR Buffer open")
  endif
endfunction

command! CreatePR call s:openNewPrBuffer()
command! SubmitPR call s:createPRFromPRBuffer()

function! s:fullscreen_tab_toggle()
  if winnr('$') > 0
    tabedit %
  else
    tabclose
  endif
endfunction


command! MaximiseToggle call s:fullscreen_tab_toggle()

" }}}

let mapleader = "\<Space>"
let maplocalleader = "\\"

" Normal Mode Mappings
" ====================
"s {{{

xnoremap <silent> <leader>f  <Plug>(coc-format-selected)
nnoremap <leader>f  <Plug>(coc-format-selected)
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> <c-x> :call Toggle_terminal()<cr>
nnoremap <silent> <C-g> :Ag<CR>
nnoremap <silent> <leader>K :Ag!<CR>
nnoremap <silent> ; :Buffers<CR>
nnoremap <silent> <C-f> :FzfChooseProjectFile<CR>
nnoremap <silent> <leader>cd :FzfSwitchProject<CR>
nnoremap <silent> <C-t> :Tags<CR>
nnoremap <silent> <C-e> :NERDTreeFind<CR>
nnoremap <silent> <leader>F :GitFiles!<CR>
nnoremap <silent> <leader>nn :call NumberToggle()<CR>
nnoremap <silent> <leader>tn :TestNearest<CR>
nnoremap <silent> <leader>T :TestFile<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>hs :call CocAction("runCommand", "git.chunkStage")<CR>
nnoremap <silent> <leader>gb :GitCheckoutBranch<CR>
nnoremap <silent> <leader>gp :GitCheckoutPr<CR>
nnoremap <silent> <leader>pbb :PrBlame<CR>
nnoremap <silent> <leader>pbc :PrBlame!<CR>
nnoremap <silent> <c-c><c-d> :LspDefinition<CR>
nnoremap <silent> <c-c>dc :LspDeclaration<CR>
nnoremap <silent> <c-c>td :LspTypeDefinition<CR>
nnoremap <silent> <c-c>ca :LspCodeAction<CR>
nnoremap <silent> <c-c>cc :Commentary<CR>
nnoremap <silent> <c-c><c-r> :LspReferences<CR>
nnoremap <silent> <c-c>rn :LspNextReference<CR>
nnoremap <silent> <c-c>rp :LspPreviousReference<CR>
nnoremap <silent> <c-c>ren :LspRename<CR>
nnoremap <silent> <c-c>h :LspHover<CR>
nnoremap <silent> <c-c>s :LspStatus<CR>
nnoremap <silent> <c-c>f :LspDocumentFormat<CR>
nnoremap <silent> <c-c>dd :LspDocumentDiagnostics<CR>
nnoremap <silent> <Leader>pr :call OpenLinePr()<cr>
nnoremap <silent> <leader>ev :vsplit ~/dotfiles/config/vim/vimrc.dotfile<cr>
nnoremap <silent> <leader><tab> <plug>(fzf-maps-n)
xnoremap <silent> <leader><tab> <plug>(fzf-maps-x)
onoremap <silent> <leader><tab> <plug>(fzf-maps-o)
nnoremap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nnoremap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nnoremap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nnoremap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nnoremap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g
nnoremap <silent> <C-n> :bprev<CR>
nnoremap <silent> <C-p> :bnext<CR>
nnoremap <silent> <C-]> :lnext<CR>
nnoremap <silent> <F12> :call CocAction('jumpDefinition', 'tab drop')<CR>
 
 " this mapping is causing weird startup errors
 "nnoremap <silent> <C-[> :lprev<cr>

 nnoremap <silent> <C-a>z :MaximiseToggle<CR>

if has('gui_running')
  nnoremap <silent> <C-a>l :CreateTerminalSplitRight<CR>
  nnoremap <silent> <C-a>h :CreateTerminalSplitLeft<CR>
  nnoremap <silent> <C-a>k :CreateTerminalSplitUp<CR>
  nnoremap <silent> <C-a>j :CreateTerminalSplitDown<CR>
endif
" }}}

" Visual mode mappings
" {{{
vnoremap <silent> <c-c>cc :Commentary<CR>
" }}}

" Insert mode mappings
" =====================
" {{{
inoremap <c-u> <esc>gUawi
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
" }}}

" Terminal mode mappings
" ======================
" {{{
if has('gui_running')
endif
" }}}

" Autocommands
" ============
" {{{
augroup vimrc
  autocmd!
  autocmd CursorHold * silent
  autocmd BufNewFile,BufRead Jenkinsfile* setlocal filetype=groovy
  autocmd FileType gitcommit,markdown,plantuml,conf setlocal spell
  autocmd FileType markdown,conf setlocal linebreak
  autocmd FileType markdown,conf setlocal textwidth=80
  autocmd FileType gitcommit setlocal textwidth=0 wrapmargin=0
  autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
  autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
  autocmd bufwritepost ~/.vimrc source ~/.vimrc
augroup END
" }}}

" Colors and Highlights
" ====================
" {{{
colorscheme onehalfdark 
let g:airline_theme='onehalfdark'

" Sneaky hack that removes the tildes from the fringe
highlight NonText guifg=bg

highlight GitGutterAdd  
      \ ctermfg=green  
      \ ctermbg=237 
      \ guibg=#282C34
      \ guifg=green

highlight GitGutterDelete 
      \ ctermfg=red
      \ ctermbg=23
      \ guifg=red
      \ guibg=#282C34

highlight GitGutterChange 
      \ ctermfg=yellow
      \ ctermbg=237
      \ guibg=#282C34
      \ guifg=yellow

highlight ALEWarningSign 
      \ ctermfg=yellow
      \ ctermbg=237
      \ guibg=#282C34
      \ guifg=yellow

highlight ALEWarning ctermbg=yellow ctermfg=black
highlight ALEError ctermbg=red ctermfg=white
highlight CursorLine ctermbg=236

highlight LspHintText
      \ guibg=#282C34
      \ guifg=#66D9EF

highlight LspHint
      \  gui=undercurl

highlight ALEErrorSign 
      \ ctermfg=red
      \ ctermbg=237
      \ guibg=#282C34
      \ guifg=red

highlight ALEError
      \ gui=undercurl
      \ guisp=red

highlight ALEWarningSign
      \ ctermfg=yellow
      \ ctermbg=237
      \ guifg=yellow
      \ guibg=#282C34

highlight LspErrorText
      \ guibg=#282C34
      \ guifg=red

highlight LspWarningText
      \ ctermfg=yellow
      \ ctermbg=237
      \ guifg=yellow
      \ guibg=#282C34

highlight terminal
      \ guibg=black

let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" }}}

" Airline
" =======
" {{{
let g:airline#extensions#tabline#excludes = [""]
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline#extensions#tabline#exclude_preview = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
" }}}
