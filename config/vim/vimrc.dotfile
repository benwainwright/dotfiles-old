" Plugins
"
" =======
" {{{
runtime macros/matchit.vim

call plug#begin('~/.vim/plugged')

" Personal plugins
Plug 'benwainwright/fzf-git'
Plug '/Users/wainwb01/repos/git-extras'
Plug 'benwainwright/fzf-project'

"" " Tim Pope
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'

" June Gunn
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Misc
Plug 'kshenoy/vim-signature'

" Language plugins
Plug 'pangloss/vim-javascript'
Plug 'ynkdir/vim-vimlparser'
Plug 'jparise/vim-graphql'

" Color theme
Plug 'kaicataldo/material.vim', { 'branch': 'main' }
Plug 'liuchengxu/vim-clap', { 'do': { -> clap#installer#force_download() } }
Plug 'vim-airline/vim-airline'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'vim-test/vim-test'
Plug 'tweekmonster/startuptime.vim'
Plug 'honza/vim-snippets'
Plug 'mlaursen/vim-react-snippets'
Plug 'wellle/targets.vim'
Plug 'wakatime/vim-wakatime'
Plug 'gioele/vim-autoswap'
Plug 'ryanoasis/vim-devicons'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'chrisbra/unicode.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'bkad/CamelCaseMotion'
Plug 'PeterRincker/vim-argumentative'
Plug 'michaeljsmith/vim-indent-object'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'lepture/vim-velocity'
Plug 'mattn/emmet-vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'NLKNguyen/papercolor-theme'
Plug 'luochen1990/rainbow'
let g:rainbow_active = 1

call plug#end()
" }}}

" Core VIM settings
" =================
" {{{

if(has('nvim'))
  set title
  let &titlestring='%t - nvim'
endif

" Delete comment characters when joining lines
set formatoptions+=j

" Increase the undo limit
set history=1000

set relativenumber

" Persist coc workspace folders in session file
set sessionoptions+=globals

" Enable syntax highlighting
syntax enable

" Indicates a fast terminal connection
set ttyfast

set nrformats=bin,hex

" attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype
" and for plugins that are filetype specific.
filetype indent plugin on

" Actual confirm box rather than dialog box on errors (such as if
" you quit without writing to a file)
set confirm

set updatetime=300

" Allows the vim unknown buffer to work with the system clipboard, so if you
" yank a piece of text, it will be available to paste outside of VIM
set clipboard=unnamed

" How characters are represented by VIM internally
set encoding=UTF-8

" Default character encoding for a new buffer
setglobal fileencoding=utf-8

" The buffer local setting 'fileencoding' setting specifies
" the encoding of a given buffer. This list will be used
" in order to decide what to set it to
set fileencodings=ucs-bom,utf-8,latin1

" Without this setting, when I switch to a new buffer, the current
" one is unloaded. This means that if I've made a change I'll then
" be asked if I want to save it. With this turned on, the buffer
" simply becomes 'hidden'
set hidden

" Don't redraw the screen while executing macros, registers and other
" untyped commands
set lazyredraw

" All horizontal splits go to the bottom half
set splitbelow

" Number of spaces that tab counts for
set tabstop=2

" In insert mode, use the appropriate number of spaces to insert a tab
set expandtab

" Number of spaces used for indentation
set shiftwidth=2

" Indenting (so << and >>) is rounded to multiples of 'shiftwidth'
set shiftround

" Use marker comments for code folding
set foldmethod=marker

" Highlight search hits
set hlsearch

" Update search matches as characters are added to search
set incsearch

" Ignore case in search patterns
set ignorecase

" Override the 'ignorecase' setting if the search pattern
" contains uppercase characters
set smartcase

" set 'nocompatible' to ward off unexpected things that your
" distro might have made, as well as sanely reset options when
" re-sourcing .vimrc
set nocompatible

" Completion mode:
" - longest: Complete till ongest common string
" - list: When more than one match, list all matches
" - full: Complete the next full match
set wildmode=longest,list,full

" Enhanced command line completion mode
set wildmenu

" Show last command in the last line of the screen
set showcmd

set signcolumn=yes

" Always show the statusline regardless of how many windows there are
set laststatus=2

" Show line and column numbers
set ruler

" Turn on line numbers

" Vertical splits always open on the right
set splitright

" Where to store all temporary data (e.g. swap files)
set directory^=$HOME/.vim/tmp/

set backupdir=$HOME/.vim/backup/

" When debugging, put the verbose logfile here
set verbosefile=~/vim-verbose.log

" If the file change son disk and the buffer hasn't changed
" autoread from disk
set autoread

" Write to disk automatically
set autowrite

" Store undo data between vim sessions
if has("persistent_undo")
  set undofile
  set undodir=~/.vim/undo
endif

" Add these characters to VIM's definition of what a 'word'
" is for the purposes of motions
set iskeyword+=_,$,@,%,-

" Completion options
" - menu: Use a popup menu to show the possible completions
" - menuone: Use the popup menu also when there is only one match
" - preview: Show extra information about the selected completion
" - noselect: Do not select a match in the menu. Force the user to choose
set completeopt+=menuone,noinsert,preview,noselect

" Don't show 'ins-completion-menu' messages, e.g. "match 1 of 2"
" "the only match" are not shown
set shortmess+=c   " Shut off completion messages

" Turns off the bell in specific situations. In this case
" when there is an unknown char after <C-G> in Insert mode
set belloff+=ctrlg " If Vim beeps during completion

set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»

" When opening a file from the command line, this stops
" the empty buffer appearing as a separate buffer in my
" tabline
if bufname('%') == ''
  set bufhidden=wipe
endif

" See https://github.com/kovidgoyal/kitty/issues/108#issuecomment-320492663
let &t_ut=''


if exists('+termguicolors')
  set t_Co=256
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" Don't spellcheck URLS
syntax match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
" Don't spell check initialisms
syntax match AcronymNoSpell '\<\(\u\|\d\)\{3,}s\?\>' contains=@NoSpell

let g:path_to_python_interpreter = '/usr/bin/python'

let mapleader = "\<Space>"
let maplocalleader = "\\"


" }}}

" COC
" ===
"{{{
let g:coc_config_home = $HOME . '/.vim' 

function! s:check_back_space() abort
    let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

"Close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

let g:coc_global_extensions = [
      \ 'coc-marketplace',
      \ 'coc-vimlsp',
      \ 'coc-snippets',
      \ 'coc-tabnine',
      \ 'coc-prettier', 
      \ 'coc-git', 
      \ 'coc-phpls',
      \ 'coc-eslint',
      \ 'coc-emoji',
      "\ 'coc-yaml',
      \ 'coc-tsserver',
      "\ 'coc-python',
      \ 'coc-docker',
      \ 'coc-json',
      \ 'coc-stylelint',
      \ 'coc-css',
      \ 'coc-highlight',
      \ 'coc-emmet',
      \ 'coc-html',
      \ 'coc-webpack',
      \ 'coc-markdownlint',
      \ 'coc-scssmodules',
      \ 'coc-sh',
      \ 'coc-react-refactor',
      \ 'coc-explorer',
      \ ]


nnoremap <C-e> :CocCommand explorer<CR>
nnoremap <leader>hs :call CocAction("runCommand", "git.chunkStage")<CR>
nnoremap <leader>e  :<C-u>CocList diagnostics<CR>

nnoremap <leader>s :CocList symbols<CR>

nnoremap <space>ca :CocList actions<CR>
nmap <leader>r <Plug>(coc-rename)
" Run jest for current project
command! -nargs=0 Jest :call  CocAction('runCommand', 'jest.projectTest')

" Run jest for current file
command! -nargs=0 JestCurrent :call  CocAction('runCommand', 'jest.fileTest', ['%'])

" Run jest for current test
nnoremap <leader>te :call CocAction('runCommand', 'jest.singleTest')<CR>

" Init jest in current cwd, require global jest command exists
command! JestInit :call CocAction('runCommand', 'jest.init')

 " this mapping is causing weird startup errors
 "nnoremap <silent> <C-[> :lprev<cr>

nnoremap <leader>jvd :call CocActionAsync('jumpDefinition', 'vsplit')<CR>
nnoremap <leader>jvi :call CocActionAsync('jumpImplementation', 'vsplit')<CR>
nnoremap <leader>jd :call CocActionAsync('jumpDefinition', 'edit')<CR>
nnoremap <leader>ji :call CocActionAsync('jumpImplementation', 'edit')<CR>
nnoremap <leader>jr :call CocActionAsync('jumpReferences')<CR>

nnoremap K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" }}}

" Misc Plugin Config
" ==================
" {{{

" Stops autopairs doing the weird behaviour where you jump to the next pair
" remap :Ag
"
" instead of inserting one
let g:AutoPairsMultilineClose = 0

let g:kitty_navigator_listening_on_address = 'unix:/tmp/mykitty'
let g:test#strategy = 'kitty'

let test#javascript#jest#file_pattern = '\v.+.spec.(js|jsx|ts|tsx)$'

" See https://github.com/ryanoasis/vim-devicons/issues/154#issuecomment-281095173
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

let g:signify_vcs_list = [ 'git' ]
let g:argumentobject_force_toplevel = 1

let g:netrw_altv=1
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzfSwitchProjectProjects = [ "~/dotfiles" ]
let g:fzfSwitchProjectWorkspaces = [
      \ "~/workspace",
      \ "~/repos",
      \ "~/go/src/github.com/benwainwright",
      \ "~/go/src/github.com/bbc"
      \ ]

let g:asyncomplete_auto_completeopt = 0
let g:fzf_layout = { 'down': '~40%' }
"" }}}

" Functions
" =========
" {{{
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

function! NetrwSidebarToggle()
  let g:netrw_chgwin = winnr()
  Vexplore
endfunction



function! s:fullscreen_tab_toggle()
  if winnr('$') > 0
    tabedit %
  else
    tabclose
  endif
endfunction


command! MaximiseToggle call s:fullscreen_tab_toggle()

" }}}

cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h') . '/' : '%%'

" Normal Mode Mappings
" ====================
"s {{{

nnoremap <CR> :noh<CR><CR>
nnoremap <leader>G :Clap grep2<CR>
nnoremap <C-b> :Clap buffers<CR>
nnoremap <C-f> :FzfChooseProjectFile<CR>
nnoremap <leader>cd :FzfSwitchProject<CR>
nnoremap <C-t> :Tags<CR>
nnoremap <leader>F :GitFiles!<CR>
nnoremap <leader>nn :call NumberToggle()<CR>
nnoremap <leader>tn :TestNearest<CR>
nnoremap <leader>T :TestFile<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>pp :Gpush<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gb :CheckoutBranch<CR>
nnoremap <leader>gp :CheckoutPR<CR>
nnoremap <leader>pbb :PrBlame<CR>
nnoremap <leader>pbc :PrBlame!<CR>
nnoremap <c-c>cc :Commentary<CR>
nnoremap <Leader>pr :call OpenLinePr()<cr>
nnoremap <leader>v :vsplit ~/dotfiles/config/vim/vimrc.dotfile<cr>
nnoremap <leader><tab> <plug>(fzf-maps-n)
xnoremap <leader><tab> <plug>(fzf-maps-x)
onoremap <leader><tab> <plug>(fzf-maps-o)
nnoremap t<C-n> :TestNearest<CR> " t Ctrl+n
nnoremap t<C-f> :TestFile<CR>    " t Ctrl+f
nnoremap t<C-s> :TestSuite<CR>   " t Ctrl+s
nnoremap t<C-l> :TestLast<CR>    " t Ctrl+l
nnoremap t<C-g> :TestVisit<CR>   " t Ctrl+g
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
nnoremap [B :bfirst<CR>
nnoremap ]B :blast<CR>
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
" }}}

" Visual mode mappings
" {{{
vnoremap <silent> <c-c>cc :Commentary<CR>
" }}}

" insert mode mappings
" =====================
" {{{
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
" }}}

xnoremap il g_o^
onoremap il :normal vil<CR>
xnoremap al $o^
onoremap al :normal val<CR>

" Autocommands
" ============
" {{{
augroup vimrc
  autocmd!
    autocmd! FileType json set filetype=jsonc

  autocmd BufNewFile,BufRead *.vtl set ft=velocity
  autocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE
  autocmd CursorHold * silent call CocActionAsync('highlight')
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  autocmd BufNewFile,BufRead Jenkinsfile* setlocal filetype=groovy
  autocmd FileType gitcommit,markdown,plantuml,conf setlocal spell
  autocmd FileType markdown,conf setlocal linebreak
  autocmd CmdlineEnter * :set norelativenumber
  autocmd CmdlineLeave * :set relativenumber
  autocmd FileType markdown,conf setlocal textwidth=80
  autocmd FileType gitcommit setlocal textwidth=0 wrapmargin=0
  autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
  autocmd CompleteDone * if pumvisible() == 0 | pclose | endif
  autocmd bufwritepost ~/.vimrc source ~/.vimrc
  autocmd BufWinEnter,Syntax * syn sync minlines=500 maxlines=500
augroup END
" }}}

" Colors and Highlights
" ====================
" {{{
set background=dark
colorscheme material

" Sneaky hack that removes the tildes from the fringe
highlight NonText guifg=bg

highlight CursorLine ctermbg=236
highlight DiffDelete guifg=red guibg=NONE
highlight DiffAdd guifg=green guibg=NONE
highlight DiffChange guifg=yellow guibg=NONE
highlight CocErrorSign guifg=red guibg=NONE
highlight CocWarningSign guifg=yellow guibg=NONE
highlight CocInfoSign guifg=#3399FF guibg=NONE
highlight CocHintSign guifg=green guibg=NONE

highlight terminal
      \ guibg=black

highlight Cursor guifg=black

let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

"" }}}

let g:neovide_cursor_vfx_mode = "wireframe"
let g:airline_powerline_fonts = 1

set guifont=FiraCode\ Nerd\ Font:h18

if has('gui')
  set macligatures
endif

set guioptions+=a  " take ownership if windowing systems global selection in Visual mode
set guioptions+=c  " use console dialogs instead of popups for simple choices

set guioptions-=m  " remove menu bar
set guioptions-=T  " remove toolbar
set guioptions-=l  " remove lefthand toolbar
set guioptions-=L
set guioptions-=r  " remove righthand toolbar

set showtabline=0

set noswapfile

tnoremap <silent> <c-h> <c-w>:TmuxNavigateLeft<cr>
tnoremap <silent> <c-j> <c-w>:TmuxNavigateDown<cr>
tnoremap <silent> <c-k> <c-w>:TmuxNavigateUp<cr>
tnoremap <silent> <c-l> <c-w>:TmuxNavigateRight<cr>
tnoremap <silent> <C-a>z <c-w>:MaximiseToggle<CR>
