if &compatible
  set nocompatible               " Be iMproved
endif


set runtimepath+=/Users/wainwb01/.vim/dein/repos/github.com/Shougo/dein.vim
if dein#load_state('/Users/wainwb01/.vim/dein')
  call dein#begin('/Users/wainwb01/.vim/dein')

  " Let dein manage dein
  call dein#add('/Users/wainwb01/.vim/dein/repos/github.com/Shougo/dein.vim')
  call dein#add('tpope/vim-fugitive')

  call dein#add('junegunn/rainbow_parentheses.vim', {
        \ 'lazy': 1,
			  \ 'on_ft': ['javascript', 'typescript']
			  \ })

  call dein#add('sheerun/vim-polyglot')
  call dein#add('ryanoasis/vim-devicons')
  call dein#add('junegunn/fzf.vim')
  call dein#add('/usr/local/opt/fzf')
  call dein#add('tpope/vim-commentary')
  call dein#add('christoomey/vim-tmux-navigator')
  call dein#add('prabirshrestha/vim-lsp')
  call dein#add('prabirshrestha/async.vim')
  call dein#add('prabirshrestha/asyncomplete.vim')
  call dein#add('prabirshrestha/asyncomplete-buffer.vim')
  call dein#add('prabirshrestha/asyncomplete-lsp.vim')
  call dein#add('rafi/awesome-vim-colorschemes')
  call dein#add('prabirshrestha/asyncomplete-emoji.vim')
  "call dein#add('mhinz/vim-signify')
  " Personal plugins
  call dein#add('benwainwright/fzf-switch-project')
  call dein#add('airblade/vim-gitgutter')
  call dein#add('jeffkreeftmeijer/vim-numbertoggle')
  call dein#add('tpope/vim-surround')
  call dein#add('w0rp/ale')
  call dein#add('chrisbra/unicode.vim')
  call dein#add('ludovicchabant/vim-gutentags')
  call dein#add('vim-airline/vim-airline')
  call dein#add('jiangmiao/auto-pairs')
  call dein#add('tpope/vim-vinegar')

    call dein#end()
  call dein#save_state()
endif

colorscheme anderson

let g:gutentags_file_list_command = 'rg --files'
let g:signify_vcs_list = [ 'git' ]
let g:lsp_signs_enabled = 1           " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
let g:lsp_signs_hint = { 'text':  'ðŸ’¡' }
"

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
" imap <C-x> <Plug>(asyncomplete_force_refresh)

if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'whitelist': ['typescript', 'javascript', 'javascript.jsx'],
        \ })
endif

if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('docker-langserver')
  " yarn global add dockerfile-language-server-nodejs
  au User lsp_setup call lsp#register_server({
        \ 'name': 'docker-langserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
        \ 'whitelist': ['Dockerfile'],
        \ })
endif

call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ }))

" Required:
set confirm                     " Actual confirm box rather than dialog box on errors (such as if
                                " you quit without write

syntax enable                   " Enable syntax highlighting
filetype indent plugin on       " attempt to determine the type of a file based on its name and possibly its
                                " contents. Use this to allow intelligent auto-indenting for each filetype,
                                " and for plugins that are filetype specific.
if dein#check_install()
  call dein#install()
endif

" Core VIM settings
"==============

set clipboard=unnamed           " Allows the vim unknown buffer to work with the system clipboard
set encoding=UTF-8              " Set character encoding used inside VIM
set hidden                      " Change buffer without saving

set exrc

set lazyredraw

set tabstop=2                   " Number of spaces that a tab counts for
set expandtab                   " Use appropriate number of spaces to insert a tab
set shiftwidth=2                " Number of spaces used for indentenation
set shiftround                  " << >> snap to multiples of shiftwidth

set hlsearch                    " highlight search hits
set incsearch                   " Update search matches as characters are added to search
set ignorecase                  " Ignore case in search patterns
set smartcase                   " If search pattern contains uppercase chars, ignorecase is turned off

set nocompatible                " set 'nocompatible' to ward off unexpected things that your
                                " distro might have made, as well as sanely reset options when
                                " re-sourcing .vimrc

set wildmode=longest,list,full  " Completion mode - see :help wildmode for more
                                " info on specific settings
set wildmenu                    " Enhanced command line completion mode
set showcmd                     " Show last command at the bottom of the screen
set laststatus=2                " Always show statusline
set ruler                       " Show line and column number
set number                      " Turn on line numbering
set cursorline                  " Highlight current line
set splitright                  " vertical split opens on the right

set directory^=$HOME/.vim/tmp/  " Where to store temporary files
set autoread                    " If file changes on disk and buffer hasn't
                                " changed, autoread from disk
if has("persistent_undo")
  set undofile                  " Store undo data between sessions
  set undodir=~/.vim/undo       " Location of undo data
endif

set iskeyword+=_,$,@,%,-        " These chars really shouldn't be word
                                " dividers
                                "
set completeopt+=menuone,noinsert,preview,noselect

set shortmess+=c   " Shut off completion messages
set belloff+=ctrlg " If Vim beeps during completion

function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
    else
        set relativenumber
    endif
endfunc

" Map leader key to be the space bar
let mapleader = "\<Space>"
let maplocalleader = "\\"

let g:fzfSwitchProjectProjects = [ "~/dotfiles" ]
let g:fzfSwitchProjectWorkspaces = [ "~/workspace", "~/repos" ]

nnoremap <leader>cd :FzfSwitchProject<CR>

nnoremap <C-g> :Ag<CR>
nnoremap <leader>K :Ag!<CR>
nnoremap ; :Buffers<CR>
nnoremap <leader>r :Tags<CR>
nnoremap <C-f> :GitFiles<CR>
nnoremap <C-F> :Files<CR>
nnoremap <C-t> :Tags<CR>
nnoremap <leader>F :GitFiles!<CR>
nnoremap <leader>g :GitFiles?<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>c :Commits<CR>
nnoremap <leader>C :BCommits<CR>
nnoremap <leader>s :Gstatus<CR>
nnoremap <leader>cm :Gcommit<CR>
nnoremap <leader>nn :call NumberToggle()<CR>
nnoremap <leader>tn :TestNearest<CR>
nnoremap <leader>T :TestFile<CR>
nnoremap <leader>gco :GCheckout<CR>

command! -bang -nargs=0 GCheckout
  \ call fzf#vim#grep(
  \   'git branch -v', 0,
  \   {
  \     'sink': function('s:open_branch_fzf')
  \   },
  \   <bang>0
  \ )

function! s:checkout_pr(pr)
  let l:hashNumber = split(a:pr)[0]
  let l:number = l:hashNumber[1:strlen(a:pr)]
  execute '!hub pr checkout ' . l:number
endfunction

nnoremap <leader>gpco :CheckoutPR<CR>

command! -bang -nargs=0 CheckoutPR
  \ call fzf#run({
  \ 'source' : "hub pr list | awk '{$1=$1}1'",
  \ 'sink' : function('s:checkout_pr'),
  \ 'down' : '30%'})
function! OpenLinePr()
  let l:blame_cmd = 'git blame ' . expand('%') . ' -L ' . line('.') . ',' .  line('.')
  let l:hash_cmd = l:blame_cmd . " | awk '{print $1}'"
  let l:response = system(l:hash_cmd)
  if v:shell_error == 0
    let l:repo_url = system('hub browse -u | cut -d/ -f1-5 | tr -d "\n"')
    let l:pr_search_url = l:repo_url . "/pulls\\?q=" . l:response
    let l:command = 'silent !open ' . l:pr_search_url . " | :redraw!"
    execute l:command
  else
    echoerr l:response
  endif
endfunction
nnoremap <Leader>pr :call OpenLinePr()<cr>

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" Normal mode mappings
nnoremap <leader>ev :vsplit ~/.vimrc<cr>
autocmd! bufwritepost ~/.vimrc source ~/.vimrc

" Insert mode mappings
inoremap <c-u> <esc>gUawi

" Mapping selecting mappings
nnoremap <leader><tab> <plug>(fzf-maps-n)
xnoremap <leader><tab> <plug>(fzf-maps-x)
onoremap <leader><tab> <plug>(fzf-maps-o)

nnoremap <silent> t<C-n> :TestNearest<CR> " t Ctrl+n
nnoremap <silent> t<C-f> :TestFile<CR>    " t Ctrl+f
nnoremap <silent> t<C-s> :TestSuite<CR>   " t Ctrl+s
nnoremap <silent> t<C-l> :TestLast<CR>    " t Ctrl+l
nnoremap <silent> t<C-g> :TestVisit<CR>   " t Ctrl+g
inoremap <leader>; <esc>maA;<esc>`al

nnoremap <C-n> :tabp<CR>
nnoremap <C-p> :tabn<CR>


" Don't spellcheck URLS
syntax match UrlNoSpell '\w\+:\/\/[^[:space:]]\+' contains=@NoSpell
" Don't spell check initialisms
syntax match AcronymNoSpell '\<\(\u\|\d\)\{3,}s\?\>' contains=@NoSpell;

" Colors
colorscheme monokai
highlight GitGutterAdd  ctermfg=10  ctermbg=237
highlight gitGutterDelete ctermfg=9 ctermbg=237
highlight gitGutterChange ctermfg=11 ctermbg=237
highlight clear ALEErrorSign
highlight clear ALEWarningSign
highlight ALEWarningSign ctermfg=yellow
highlight ALEWarning ctermbg=yellow ctermfg=black
highlight ALEErrorSign ctermfg=red
highlight ALEError ctermbg=red ctermfg=white
highlight CursorLine ctermbg=236

set background=dark
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

augroup vimrc
  autocmd!
  autocmd BufNewFile,BufRead Jenkinsfile* setlocal filetype=groovy
  autocmd FileType gitcommit,markdown,plantuml,conf setlocal spell
  autocmd FileType markdown,conf setlocal linebreak
  autocmd FileType markdown,conf setlocal textwidth=80
  autocmd FileType gitcommit setlocal textwidth=0 wrapmargin=0
  autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
augroup END


let g:ale_sign_column_always = 1
"let g:ale_linters = {
      \ 'javascript.jsx': ['eslint'],
      \ 'javascript': ['eslint'],
      \ 'typescript': ['tslint']
      \ }
let g:ale_javascript_eslint_use_global = 1
let g:ale_echo_msg_format = '%s (%linter%)'
let g:ale_sh_shellcheck_options = '-e SC1090'
let g:ale_sign_error = 'âœ–'
let g:test_foo = 'string'

let g:gitgutter_sign_added = 'ï‘—'
let g:gitgutter_sign_modified = 'ï‘™'
let g:gitgutter_sign_removed = 'ï‘˜'
let g:gitgutter_sign_modified_removed = 'ï‘™'
