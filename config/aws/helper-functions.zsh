aws-select-account() {
  account=$(cat ~/.awsAccounts.json | jq --raw-output ".[].name" | fzf --height=10)
  cat ~/.awsAccounts.json | jq --raw-output ".[] | select(.name == \"$account\").account"
}

# aws() {
#   if [ -z "$AWS_ACCESS_KEY_ID" ] || \
#      [ -z "$AWS_SECRET_ACCESS_KEY" ] || \
#      [ -z "$AWS_SESSION_TOKEN" ]; then
#     if [ -z "$AWS_ACCOUNT" ]; then
#       AWS_ACCOUNT=$(aws-select-account)
#     fi
#     awsAuthenticateWithWormhole "$AWS_ACCOUNT"
#   fi
#   command aws "$@"
# }

aws() {
  if [ -z $AWS_DEFAULT_PROFILE ] || [ "$1" = "--switch" ]; then
    aws-switch-profile-fzf
  fi
  command aws "$@"
}

aws-config-reader() {
  unset aws_profiles
  aws_profiles = ()
  local profile='unknown'
  while read line; do
    if [[ $line =~ '^\[profile' ]]; then
      profile=$(echo "$line"| sed 's/\[profile \(.*\)\]/\1/g')
      aws_profiles+=($profile)
    fi
  done < ~/.aws/config
  set +x
}

aws-switch-profile-fzf() {
  aws-config-reader

  local prof=$(
    for name in $aws_profiles; do
      printf "$name\n" $name
    done | sort | fzf --height=20% --prompt="profile: " | awk '{print $1}'
  )

  export AWS_DEFAULT_PROFILE=$prof
  export AWS_PROFILE=$prof
  echo "AWS_DEFAULT_PROFILE and AWS_DEFAULT_PROFILE now set to $prof"
}

codebuildSelectProject() {
  local region

  region=$1
  aws \
    codebuild \
    list-projects \
    --region "$1" \
    | jq ".projects[]" \
    --raw-output \
    | fzf --height 20
}

codebuildGetProject() {
  local project region

  region=$1

  project=$(codebuildSelectProject "$region")

  aws \
    codebuild \
    batch-get-project \
    --names "$project"
}

codebuildGetLastBuildId() {
  local project
  local region

  project="$1"
  region="$2"

  aws \
    codebuild \
    list-builds-for-project \
    --region "$region" \
    --project-name "$project" \
    | jq --raw-output ".ids[0]"
}

codebuildGetLastBuildFromProject() {
  local project
  local region

  region="$1"

  project=$(codebuildSelectProject "$region")
  id=$(codebuildGetLastBuildId "$project" "$region")
}



awsAuthenticateWithWormhole() {
  local account

  account=$1

  >&2 echo "Getting AWS credentials from Wormhole"
  creds=$(curl --silent --show-error https://wormhole.api.bbci.co.uk/account/$account/credentials)

  export AWS_ACCESS_KEY_ID=$(echo $creds | jq --raw-output ".accessKeyId")
  export AWS_SECRET_ACCESS_KEY=$(echo $creds | jq --raw-output ".secretAccessKey")
  export AWS_SESSION_TOKEN=$(echo $creds | jq --raw-output ".sessionToken")
  >&2 echo "Done"
}

aws_cli_profile_set() {
  export AWS_DEFAULT_PROFILE=$1
}


ecr-login() {
  if [ -z $AWS_DEFAULT_PROFILE ] || [ "$1" = "--switch" ]; then
    aws-switch-profile-fzf
  fi
  ecr-stdin-login
}

ecr-login-with-profile() {
  export AWS_DEFAULT_PROFILE="$1"
  ecr-stdin-login
}

# The login command generated by the CLI always outputs a warning
# about passing password via the -p arg as opposed to STDIN being
# insecure, so this function makes the login use STDIN
#
# The way I did this (using cut) is probably brittle; but I really
# cannot be bothered to work out the regex
ecr-stdin-login() {
  set -x
  local raw_login_cmd=$(aws ecr get-login --no-include-email)
  local login_cmd=$(echo $raw_login_cmd | cut -f 1-4,7 -d " ")
  local password=$(echo $raw_login_cmd | cut -f 6 -d " ")
  eval "echo $password | $login_cmd --password-stdin"
  set +x
}
