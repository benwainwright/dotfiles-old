aws_cli_profile_set() {
  export AWS_DEFAULT_PROFILE=$1
}

aws-switch-profile-fzf() {
  local profiles=$(cat ~/.aws/config | grep profile | sed 's/\[profile \(.*\)\]/\1/g')
  export AWS_DEFAULT_PROFILE=$(echo $profiles | fzf --height=20% --prompt="profile: ")
}

ecr-login() {
  if [ -z $AWS_DEFAULT_PROFILE ] || [ "$1" = "--switch" ]; then
    aws-switch-profile-fzf
  fi
  ecr-stdin-login
}

ecr-login-with-profile() {
  export AWS_DEFAULT_PROFILE="$1"
  ecr-stdin-login
}

# The login command generated by the CLI always outputs a warning
# about passing password via the -p arg as opposed to STDIN being 
# insecure, so this function makes the login use STDIN
#
# The way I did this (using cut) is probably brittle; but I really
# cannot be bothered to work out the regex
ecr-stdin-login() {
  local raw_login_cmd=$(aws ecr get-login --no-include-email)
  local login_cmd=$(echo $raw_login_cmd | cut -f 1-4,7 -d " ")
  local password=$(echo $raw_login_cmd | cut -f 6 -d " ")
  eval "echo $password | $login_cmd --password-stdin"
}
