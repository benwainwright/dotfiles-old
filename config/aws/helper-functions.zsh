
# Parse the config into an associative array
# Could be made to pick up more info in the future
# Currently just takes the credentials line and extracts account_id
aws-config-reader() {
  typeset -gA aws_profiles
  aws_profiles = ()
  local profile='unknown'
  while read line; do
    if [[ $line =~ '^\[profile' ]]; then
      profile=$(echo "$line"| sed 's/\[profile \(.*\)\]/\1/g')
    elif [[ $line =~ '^credential_process' ]]; then
      local account_id=$(echo "$line" | grep -Eo '\d+')
      aws_profiles[$profile]=$account_id
    fi
  done < ~/.aws/config
  set +x
}

aws_cli_profile_set() {
  export AWS_DEFAULT_PROFILE=$1
}

aws-switch-profile-fzf() {
  aws-config-reader

  # Loop over associative array printing some text suitable for fzf
  # then pick the first word of the fzf selection
  local prof=$(
    for key val in ${(kv)aws_profiles}; do
      printf "%-20s %s\n" $key $val
    done | sort | fzf --height=20% --prompt="profile: " | awk '{print $1}'
  )

  export AWS_DEFAULT_PROFILE=$prof
  echo "AWS_DEFAULT_PROFILE now set to $AWS_DEFAULT_PROFILE"
}

aws() {
  if [ -z $AWS_DEFAULT_PROFILE ] || [ "$1" = "--switch" ]; then
    aws-switch-profile-fzf
    if [ "$1" = "--switch" ]; then
      shift
    fi
  fi
  command aws "$@"
}

ecr-login() {
  if [ -z $AWS_DEFAULT_PROFILE ] || [ "$1" = "--switch" ]; then
    aws-switch-profile-fzf
  fi
  ecr-stdin-login
}

ecr-login-with-profile() {
  export AWS_DEFAULT_PROFILE="$1"
  ecr-stdin-login
}

# The login command generated by the CLI always outputs a warning
# about passing password via the -p arg as opposed to STDIN being 
# insecure, so this function makes the login use STDIN
#
# The way I did this (using cut) is probably brittle; but I really
# cannot be bothered to work out the regex
ecr-stdin-login() {
  local raw_login_cmd=$(aws ecr get-login --no-include-email)
  local login_cmd=$(echo $raw_login_cmd | cut -f 1-4,7 -d " ")
  local password=$(echo $raw_login_cmd | cut -f 6 -d " ")
  eval "echo $password | $login_cmd --password-stdin"
}
